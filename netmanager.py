# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Net_Manager2.ui'
#
# Created by: PyQt5 UI code generator 5.15.5
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
import sqlite3
from configparser import ConfigParser
import re
from time import strftime
from PyQt5.QtWebEngineWidgets import QWebEngineView
from PyQt5.QtCore import QDateTime, Qt, QDate
from PyQt5.QtWidgets import QMessageBox
from PyQt5 import QtCore, QtGui, QtWidgets
import random
import datetime
import js8callAPIsupport
import folium
import sqlite3
import io
from datetime import datetime
import csv
import pandas as pd
import maidenhead as mh
import shutil
import platform

serverip = ""
serverport = ""
callsign = ""
grid = ""
selectedgroup = ""
acklist = ""
mapper = ""
index = ""
start = ""
end = ""
memgroup1 =""
memgroup2 =""
selectednetid = 0
data = ""
map_flag = 0
mantestlat = 0.0
mantestlong = 0.0
OS_Reports = ""

from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Form_Net_Manager(object):
    def setupUi(self, Form_Net_Manager):
        Form_Net_Manager.setObjectName("Form_Net_Manager")
        Form_Net_Manager.resize(1024, 768)
        self.gridLayout_2 = QtWidgets.QGridLayout(Form_Net_Manager)
        self.gridLayout_2.setObjectName("gridLayout_2")
        icon = QtGui.QIcon()

        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("USA-32.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Form_Net_Manager.setWindowIcon(icon)


        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        
        

        self.labelNet_Time_END = QtWidgets.QLabel(Form_Net_Manager)
        self.labelNet_Time_END.setGeometry(QtCore.QRect(410, 15, 61, 16))
        self.labelNet_Time_END.setFont(font)
        self.labelNet_Time_END.setObjectName("labelNet_END")
        

        self.dateTimeEdit_END = QtWidgets.QDateTimeEdit(Form_Net_Manager)
        self.dateTimeEdit_END.setGeometry(QtCore.QRect(470, 15, 126, 22))
        self.dateTimeEdit_END.setFont(font)
        self.dateTimeEdit_END.setObjectName("dateTimeEdit_END")
        self.dateTimeEdit_END.setCalendarPopup(True)
        self.dateTimeEdit_END.setTimeSpec(QtCore.Qt.UTC)
        self.dateTimeEdit_END.setDisplayFormat("yyyy.MM.dd  HH:mm Z")





        self.dateTimeEdit = QtWidgets.QDateTimeEdit(Form_Net_Manager)
        self.dateTimeEdit.setGeometry(QtCore.QRect(280, 15, 126, 22))
        self.dateTimeEdit.setFont(font)
        self.dateTimeEdit.setObjectName("dateTimeEdit")
        self.dateTimeEdit.setCalendarPopup(True)
        self.dateTimeEdit.setTimeSpec(QtCore.Qt.UTC)
        self.dateTimeEdit.setDisplayFormat("yyyy.MM.dd  HH:mm Z")


        self.lineEditNet_Name = QtWidgets.QLineEdit(Form_Net_Manager)
        self.lineEditNet_Name.setGeometry(QtCore.QRect(85, 15, 113, 22))
        self.lineEditNet_Name.setFont(font)
        self.lineEditNet_Name.setObjectName("lineEditNet_Name")

        self.labelNet_Name = QtWidgets.QLabel(Form_Net_Manager)
        self.labelNet_Name.setGeometry(QtCore.QRect(10, 15, 71, 16))
        self.labelNet_Name.setFont(font)
        self.labelNet_Name.setObjectName("labelNet_Name")

        self.labelNet_NCS = QtWidgets.QLabel(Form_Net_Manager)
        self.labelNet_NCS.setGeometry(QtCore.QRect(700, 15, 71, 16))
        self.labelNet_NCS.setFont(font)
        self.labelNet_NCS.setObjectName("labelNet_NCS")

        self.lineEditNet_NCS = QtWidgets.QLineEdit(Form_Net_Manager)
        self.lineEditNet_NCS.setGeometry(QtCore.QRect(775, 15, 113, 22))
        self.lineEditNet_NCS.setFont(font)
        self.lineEditNet_NCS.setObjectName("lineEditNet_NCS")



        #self.labelNet_NOTES = QtWidgets.QLabel(Form_Net_Manager)
        #self.labelNet_NOTES.setGeometry(QtCore.QRect(210, 50, 71, 16))
        #self.labelNet_NOTES.setObjectName("labelNet_NOTES")

        #self.lineEditNet_NOTES = QtWidgets.QLineEdit(Form_Net_Manager)
        #self.lineEditNet_NOTES.setGeometry(QtCore.QRect(275, 50, 725, 40))
        #self.lineEditNet_NOTES.setObjectName("lineEditNet_NOTES")





        self.labelNet_Time = QtWidgets.QLabel(Form_Net_Manager)
        self.labelNet_Time.setGeometry(QtCore.QRect(205, 15, 61, 16))
        self.labelNet_Time.setFont(font)
        self.labelNet_Time.setObjectName("labelNet_Time")

        self.labelNet_Manual = QtWidgets.QLabel(Form_Net_Manager)
        self.labelNet_Manual.setGeometry(QtCore.QRect(10, 55, 150, 16))
        self.labelNet_Manual.setFont(font)
        self.labelNet_Manual.setObjectName("labelNet_Manual")

        self.lineEditNet_manual = QtWidgets.QLineEdit(Form_Net_Manager)
        self.lineEditNet_manual.setGeometry(QtCore.QRect(155, 55, 60, 22))
        self.lineEditNet_manual.setFont(font)
        self.lineEditNet_manual.setObjectName("lineEditNet_manual")

        self.labelNet_STATE = QtWidgets.QLabel(Form_Net_Manager)
        self.labelNet_STATE.setGeometry(QtCore.QRect(240, 55, 60, 16))
        self.labelNet_STATE.setFont(font)
        self.labelNet_STATE.setObjectName("labelNet_STATE")

        #self.lineEditNet_STATE = QtWidgets.QLineEdit(Form_Net_Manager)
        #self.lineEditNet_STATE.setGeometry(QtCore.QRect(305, 85, 40, 22))
        #self.lineEditNet_STATE.setObjectName("lineEditNet_STATE")

        self.comboBoxState = QtWidgets.QComboBox(Form_Net_Manager)
        self.comboBoxState.setGeometry(QtCore.QRect(285, 55, 50, 22))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(8)
        self.comboBoxState.setFont(font)
        self.comboBoxState.setObjectName("comboBoxState")
        self.comboBoxState.addItem('AL')
        self.comboBoxState.addItem('AK')
        self.comboBoxState.addItem('AZ')
        self.comboBoxState.addItem('AR')
        self.comboBoxState.addItem('CA')
        self.comboBoxState.addItem('CO')
        self.comboBoxState.addItem('CT')
        self.comboBoxState.addItem('DE')
        self.comboBoxState.addItem('FL')
        self.comboBoxState.addItem('GA')
        self.comboBoxState.addItem('HI')
        self.comboBoxState.addItem('ID')
        self.comboBoxState.addItem('IL')
        self.comboBoxState.addItem('IN')
        self.comboBoxState.addItem('IA')
        self.comboBoxState.addItem('KS')
        self.comboBoxState.addItem('KY')
        self.comboBoxState.addItem('LA')
        self.comboBoxState.addItem('ME')
        self.comboBoxState.addItem('MD')
        self.comboBoxState.addItem('MA')
        self.comboBoxState.addItem('MI')
        self.comboBoxState.addItem('MN')
        self.comboBoxState.addItem('MS')
        self.comboBoxState.addItem('MO')
        self.comboBoxState.addItem('MT')
        self.comboBoxState.addItem('NE')
        self.comboBoxState.addItem('NV')
        self.comboBoxState.addItem('NH')
        self.comboBoxState.addItem('NJ')
        self.comboBoxState.addItem('NM')
        self.comboBoxState.addItem('NY')
        self.comboBoxState.addItem('NC')
        self.comboBoxState.addItem('ND')
        self.comboBoxState.addItem('OH')
        self.comboBoxState.addItem('OK')
        self.comboBoxState.addItem('OR')
        self.comboBoxState.addItem('PA')
        self.comboBoxState.addItem('RI')
        self.comboBoxState.addItem('SC')
        self.comboBoxState.addItem('SD')
        self.comboBoxState.addItem('TN')
        self.comboBoxState.addItem('TX')
        self.comboBoxState.addItem('UT')
        self.comboBoxState.addItem('VT')
        self.comboBoxState.addItem('VA')
        self.comboBoxState.addItem('WA')
        self.comboBoxState.addItem('WV')
        self.comboBoxState.addItem('WI')
        self.comboBoxState.addItem('WY')


        self.labelNet_Manual_GRID = QtWidgets.QLabel(Form_Net_Manager)
        self.labelNet_Manual_GRID.setGeometry(QtCore.QRect(350, 55, 80, 16))
        self.labelNet_Manual_GRID.setFont(font)
        self.labelNet_Manual_GRID.setObjectName("labelNet_Manual_GRID")

        self.lineEditNet_manual_GRID = QtWidgets.QLineEdit(Form_Net_Manager)
        self.lineEditNet_manual_GRID.setGeometry(QtCore.QRect(425, 55, 50, 24))
        self.lineEditNet_manual_GRID.setFont(font)
        self.lineEditNet_manual_GRID.setObjectName("lineEditNet_GRID")



        self.labelNet_Manual_TRAF = QtWidgets.QLabel(Form_Net_Manager)
        self.labelNet_Manual_TRAF.setGeometry(QtCore.QRect(490, 55, 80, 16))
        self.labelNet_Manual_TRAF.setFont(font)
        self.labelNet_Manual_TRAF.setObjectName("labelNet_Manual_TRAF")

        self.lineEditNet_manual_TRAF = QtWidgets.QLineEdit(Form_Net_Manager)
        self.lineEditNet_manual_TRAF.setGeometry(QtCore.QRect(570, 55, 290, 24))
        self.lineEditNet_manual_TRAF.setFont(font)
        self.lineEditNet_manual_TRAF.setObjectName("lineEditNet_TRAF")

        self.pushButton_Manual = QtWidgets.QPushButton(Form_Net_Manager)
        self.pushButton_Manual.setGeometry(QtCore.QRect(875, 55, 135, 24))
        self.pushButton_Manual.setFont(font)
        self.pushButton_Manual.setObjectName("pushButton_Manual")

        self.pushButton_Schedule_Net_Only = QtWidgets.QPushButton(Form_Net_Manager)
        self.pushButton_Schedule_Net_Only.setGeometry(QtCore.QRect(900, 15, 110, 24))
        self.pushButton_Schedule_Net_Only.setFont(font)
        self.pushButton_Schedule_Net_Only.setObjectName("pushButton_Schedule_Net_Only")




        self.comboBox = QtWidgets.QComboBox(Form_Net_Manager)
        self.comboBox.setGeometry(QtCore.QRect(640, 15, 51, 22))
        self.comboBox.setFont(font)
        #self.comboBox.setGeometry(QtCore.QRect(0, 0, 1, 1))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")

        self.label_Band = QtWidgets.QLabel(Form_Net_Manager)
        self.label_Band.setGeometry(QtCore.QRect(600, 15, 49, 16))
        self.label_Band.setFont(font)
        #self.label_Band.setGeometry(QtCore.QRect(0, 1, 1, 1))
        self.label_Band.setObjectName("label_Band")

        self.line = QtWidgets.QFrame(Form_Net_Manager)
        self.line.setGeometry(QtCore.QRect(12, 77, 1001, 16))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")

        self.line2 = QtWidgets.QFrame(Form_Net_Manager)
        self.line2.setGeometry(QtCore.QRect(12, 40, 1001, 16))
        self.line2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line2.setObjectName("line2")


        self.label_Activ_NET = QtWidgets.QLabel(Form_Net_Manager)
        self.label_Activ_NET.setGeometry(QtCore.QRect(20, 100, 156, 16))
        #self.label_Activ_NET.setGeometry(QtCore.QRect(2, 1, 1, 1))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(True)
        self.label_Activ_NET.setFont(font)
        self.label_Activ_NET.setObjectName("label_Activ_NET")


        self.label = QtWidgets.QLabel(Form_Net_Manager)
        self.label.setGeometry(QtCore.QRect(0, 0, 1, 1))
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(True)
        self.label.setFont(font)
        self.label.setObjectName("label")


        self.tableWidget = QtWidgets.QTableWidget(Form_Net_Manager)
        #self.tableWidget.setGeometry(QtCore.QRect(15, 185, 961, 296))
        self.tableWidget.setGeometry(QtCore.QRect(1, 1, 1, 1))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(3)
        self.tableWidget.setRowCount(8)


        #self.Label_Checkins = QtWidgets.QLabel(Form_Net_Manager)
        #self.Label_Checkins.setGeometry(QtCore.QRect(20, 125, 86, 16))
        #self.Label_Checkins.setObjectName("Label_Checkins")

        self.comboBox_2 = QtWidgets.QComboBox(Form_Net_Manager)
        self.comboBox_2.setGeometry(QtCore.QRect(130, 100, 360, 22))
        font.setBold(False)
        self.comboBox_2.setFont(font)

        self.comboBox_2.setObjectName("comboBox_2")

        self.pushButton_Reload = QtWidgets.QPushButton(Form_Net_Manager)
        self.pushButton_Reload.setGeometry(QtCore.QRect(520, 100, 100, 22))
        self.pushButton_Reload.setFont(font)
        self.pushButton_Reload.setObjectName("pushButton_Reload")

        self.pushButton_Net_Schedule_Delete = QtWidgets.QPushButton(Form_Net_Manager)
        self.pushButton_Net_Schedule_Delete.setGeometry(QtCore.QRect(640, 100, 140, 22))
        self.pushButton_Net_Schedule_Delete.setFont(font)
        self.pushButton_Net_Schedule_Delete.setObjectName("pushButton_Net_Schedule_Delete")

        self.label_NET_ACK = QtWidgets.QLabel(Form_Net_Manager)
        self.label_NET_ACK.setGeometry(QtCore.QRect(15, 350, 61, 16))
        self.label_NET_ACK.setFont(font)
        self.label_NET_ACK.setObjectName("label_NET_ACK")
        #self.gridLayout_2.addWidget(self.label_NET_ACK, 4, 0, 1, 1)

        self.lineEdit = QtWidgets.QLineEdit(Form_Net_Manager)
        self.lineEdit.setGeometry(QtCore.QRect(75, 350, 580, 22))
        self.lineEdit.setFont(font)
        self.lineEdit.setObjectName("lineEdit")
        #self.gridLayout_2.addWidget(self.lineEdit, 4, 1, 1, 1)

        self.pushButton_TX = QtWidgets.QPushButton(Form_Net_Manager)
        self.pushButton_TX.setGeometry(QtCore.QRect(670, 350, 100, 24))
        self.pushButton_TX.setFont(font)
        self.pushButton_TX.setObjectName("pushButton_TX")
        #self.gridLayout_2.addWidget(self.pushButton_TX, 4, 2, 1, 1)

        self.pushButton_Cancel = QtWidgets.QPushButton(Form_Net_Manager)
        self.pushButton_Cancel.setGeometry(QtCore.QRect(785, 350, 100, 24))
        self.pushButton_Cancel.setFont(font)
        #self.gridLayout_2.addWidget(self.pushButton_cancel, 4, 0, 1, 1)
        #self.gridLayout_2.pushButton_Cancel.setGeometry(QtCore.QRect(4, 0, 2, 1))
        self.pushButton_Cancel.setObjectName("pushButton_Cancel")
        #self.gridLayout_2.addWidget(self.pushButton_Cancel, 4, 3, 1, 1)

        #self.pushButton = QtWidgets.QPushButton(FormRoster)
        #self.pushButton.setObjectName("pushButton")
        #self.gridLayout_2.addWidget(self.pushButton, 4, 0, 1, 1)

        self.widget = QWebEngineView()
        self.widget.setObjectName("widget")
        #self.gridLayout_2.addWidget(self.widget, 4, 0, 1, 1)
        #self.gridLayout_2.addWidget.widget = QWebEngineView()
        self.gridLayout_2.addWidget(self.widget,4, 0, 2, 5)
        #self.run_mapper()




        self.pushButton = QtWidgets.QPushButton(Form_Net_Manager)
        self.pushButton.setGeometry(QtCore.QRect(900, 350, 100, 24))
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        #self.gridLayout_2.addWidget(self.pushButton, 4, 4, 1, 1)

        self.widget = QtWidgets.QWidget(Form_Net_Manager)
        self.widget.setGeometry(QtCore.QRect(24, 435, 981, 386))
        self.widget.setObjectName("widget")

        self.gridLayout_2.setRowStretch(0, 0);
        self.gridLayout_2.setRowStretch(1, 1);
        self.gridLayout_2.setRowStretch(2, 1);
        self.gridLayout_2.setRowStretch(3, 1);
        self.gridLayout_2.setRowStretch(4, 1);
        self.gridLayout_2.setRowStretch(5, 2);

        self.retranslateUi(Form_Net_Manager)
        QtCore.QMetaObject.connectSlotsByName(Form_Net_Manager)

        self.pushButton_Schedule_Net_Only.clicked.connect(self.net_add)
        self.pushButton_Net_Schedule_Delete.clicked.connect(self.delete_net)
        self.pushButton_Manual.clicked.connect(self.getmember)

        self.comboBox_2.activated.connect(self.loadcheckins_combo)
        self.tableWidget.clicked.connect(self.on_Click)
        self.pushButton_Reload.clicked.connect(self.loadcheckins_after)
        self.pushButton.clicked.connect(self.export_csv)
        self.pushButton_Cancel.clicked.connect(self.cancelled)
        self.pushButton_TX.clicked.connect(self.transmit)
        
        self.serveripad = serverip
        self.servport = int(serverport)
        self.api = js8callAPIsupport.js8CallUDPAPICalls((self.serveripad),
                                                        int(self.servport))
        


    def retranslateUi(self, Form_Net_Manager):
        _translate = QtCore.QCoreApplication.translate
        Form_Net_Manager.setWindowTitle(_translate("Form_Net_Manager", "Commstat Net Manager"))
        self.labelNet_Name.setText(_translate("Form_Net_Manager", "NET Name:"))
        self.labelNet_Time.setText(_translate("Form_Net_Manager", "NET START:"))
        self.labelNet_Manual.setText(_translate("Form_Net_Manager", "Manual Check in Callsign: "))
        self.labelNet_NCS.setText(_translate("Form_Net_Manager", "NCS Callsign:"))
        self.labelNet_STATE.setText(_translate("Form_Net_Manager", "State :"))

        #self.labelNet_NOTES.setText(_translate("Form_Net_Manager", "NET NOTES:"))
        self.pushButton_Manual.setText(_translate("Form_Net_Manager", "Save Manual Check In"))
        self.pushButton_Schedule_Net_Only.setText(_translate("Form_Net_Manager", "Schedule Net"))
        self.pushButton_Net_Schedule_Delete.setText(_translate("Form_Net_Manager", "Delete Selected NET"))
        self.comboBox.setItemText(0, _translate("Form_Net_Manager", "20M"))
        self.comboBox.setItemText(1, _translate("Form_Net_Manager", "30M"))
        self.comboBox.setItemText(2, _translate("Form_Net_Manager", "40M"))
        self.comboBox.setItemText(3, _translate("Form_Net_Manager", "80M"))
        self.label_Band.setText(_translate("Form_Net_Manager", "Band :"))
        self.label_Activ_NET.setText(_translate("Form_Net_Manager", "Active Net: "))
        self.label.setText(_translate("Form_Net_Manager", "NET Scheduler"))
        #self.Label_Checkins.setText(_translate("Form_Net_Manager", "Check Ins :"))
        self.label_NET_ACK.setText(_translate("Form_Net_Manager", "NET ACK : "))
        self.labelNet_Manual_GRID.setText(_translate("Form_Net_Manager", "Manual Grid: "))
        self.labelNet_Manual_TRAF.setText(_translate("Form_Net_Manager", "Manual Traffic: "))
        self.pushButton_TX.setText(_translate("Form_Net_Manager", "Transmit"))
        self.pushButton_Cancel.setText(_translate("Form_Net_Manager", "Cancel"))
        self.pushButton.setText(_translate("Form_Net_Manager", "Create CSV File"))
        self.labelNet_Time_END.setText(_translate("Form_Net_Manager", "NET END :"))
        self.pushButton_Reload.setText(_translate("Form_Net_Manager", "Refresh"))





        self.getConfig()
        self.oscheck()
        self.combo_pop()




    def getConfig(self):
        global serverip
        global serverport
        global grid
        global callsign
        global selectedgroup
        global memgroup1
        global memgroup2
        if os.path.exists("config.ini"):
            now = QDateTime.currentDateTime()
            now = now.toUTC()
            config_object = ConfigParser()
            config_object.read("config.ini")
            userinfo = config_object["USERINFO"]
            systeminfo = config_object["DIRECTEDCONFIG"]
            callsign = format(userinfo["callsign"])
            callsignSuffix = format(userinfo["callsignsuffix"])
            group1 = format(userinfo["group1"])
            group2 = format(userinfo["group2"])
            grid = format(userinfo["grid"])
            path = format(systeminfo["path"])
            serverip = format(systeminfo["server"])
            serverport = format(systeminfo["port"])
            selectedgroup = format(userinfo["selectedgroup"])
            labeltext = ("Currently Active Group : " + selectedgroup)
            #print(labeltext)
            self.label.setText("net tezt here")
            #self.gridLayout.addWidget(self.label, 0, 2, 1, 1)
            self.label.setText( labeltext)
            self.lineEditNet_NCS.setText(callsign)
            self.dateTimeEdit.setDateTime(now)
            self.dateTimeEdit_END.setDateTime(now)
            #print(callsign)
            memgroup1 = group1
            memgroup2 = group2
            self.lineEditNet_manual_TRAF.setText("MA: NTR")


    def oscheck(self):
        global OS
        global bull1
        global bull2
        global OS_Directed
        global OS_Reports
        pios = "aarch64"
        winos = "Windows"
        linuxos = "Linux"
        if pios in (platform.platform()):
            #print("Commstat this is Pi 64bit OS")
            OS = "pi"
            bull1 = 0
            bull2 = 4
        if winos in (platform.platform()):
            #print("Commstat this is Windows OS")
            OS_Reports = "reports\\"
        # sudo apt install ./python-pyqt5.qtwebengine_5.15.2-2_arm64.deb
        if linuxos in (platform.platform()):
            #print("Commstat this is Linux OS")
            OS_Reports = "reports/"

    def combo_pop(self):
        self.comboBox_2.clear()

        sqliteConnection = sqlite3.connect('traffic.db3')
        cursor = sqliteConnection.cursor()

        query = "SELECT NetId, NETName, NETBAND, NETSTART, NETEND FROM NETS"
        cursor.execute(query)
        items = cursor.fetchall()
        for item in items:
            netid = item[0]
            nname = item[1]
            netband = item[2]
            netstart = item[3]
            netend = item[4]
            #print(netid,nname, netstart,)
            netidst = str(netid)
            self.comboBox_2.addItem(str(netid)+" | "+str(nname)+" | "+str(netband)+" | "+str(netstart)+" | "+str(netend))




    def cancelled(self):
        global acklist
        self.lineEdit.setText("")
        acklist = ""
        
        




    def mapperWidget(self):
        global mapper
        global data
        global map_flag
        #global mapper
        global selectednetid
        if selectednetid < 1:
            print("NETMANAGER Net ID Not Selected")
            selectednetid = 1

        self.widget.deleteLater()
        self.widget = QWebEngineView()
        self.widget.setObjectName("widget")


        mapper = QWebEngineView()
        coordinate = (38.8199286, -90.4782551)
        m = folium.Map(
            #tiles='Stamen Terrain',
            zoom_start=4,
            location=coordinate

        )

        try:
            sqliteConnection = sqlite3.connect('traffic.db3')
            cursor = sqliteConnection.cursor()
            today = QDate.currentDate()
            todaystring2 = (today.toString(Qt.ISODate))
            yesterday = today.addDays(-1).toString(Qt.ISODate)

            netid = selectednetid
            connection = sqlite3.connect('traffic.db3')
            cur = connection.cursor()
            netstart1 = cur.execute("SELECT NETSTART FROM NETS WHERE NetId = ?", (netid,))
            start1 = netstart1.fetchone()

            netend1 = cur.execute("SELECT NETEND FROM NETS WHERE NetId = ?", (netid,))
            end1 = netend1.fetchone()
            connection = sqlite3.connect('traffic.db3')
            cur = connection.cursor()
            start = (start1[0])
            format_data = "%Y-%m-%d %H:%M"
            netstart = datetime.strptime(start, format_data)

            end = (end1[0])
            format_data = "%Y-%m-%d %H:%M"
            netend = datetime.strptime(end, format_data)
            query = (
                "SELECT gridlat, gridlong, callsign, ACK, date FROM checkins_Data WHERE date BETWEEN ? AND ?")
            cursor.execute(query, (netstart, netend))



            #query = "SELECT gridlat, gridlong, callsign, date  FROM checkins_Data where groupname = ? and date like ? or date LIKE ?"
            #cursor.execute(query, (selectedgroup, '%' + todaystring2 + '%', '%' + yesterday + '%'))


            #sqlite_select_query = 'SELECT gridlat, gridlong, callsign, date FROM checkins_Data where groupname=?'
            #cursor.execute(sqlite_select_query, (selectedgroup,))
            items = cursor.fetchall()

            for item in items:
                glat = item[0]
                glon = item[1]
                call = item[2]
                ack = item[3]
                utc = item[4]




                pinstring = ("Checked In:")
                html = '''<HTML> <BODY><p style="color:blue;font-size:14px;">%s %s<br>
                Ack'ed :%s<br>
                Time :%s
                </p></BODY></HTML>''' % (pinstring,call, ack, utc,)
                iframe = folium.IFrame(html,
                                       width=160,
                                       height=70)

                popup = folium.Popup(iframe,
                                     min_width=100, max_width=160)
                #folium.Marker(location=[glat, glon], popup=popup).add_to(m)
                folium.CircleMarker(radius=6,fill=True, fill_color="darkblue",
                 location=[glat, glon], popup=popup, icon=folium.Icon(color="red")).add_to(m)


            cur.close()
            cursor.close()

        except sqlite3.Error as error:
            print("NETMANAGER Failed to read data from sqlite table", error)
        finally:
            if (sqliteConnection):
                sqliteConnection.close()
         #       print("The SQLite connection is closed")
        # return map

        # folium.Marker(location=[38.655800, -87.274721],popup='<h3 style="color:green;">Marker2</h3>').add_to(m)
        # save map data to data object
        data = io.BytesIO()
        m.save(data, close_file=False)
        #mapper.setHtml(data.getvalue().decode())

       # if map_flag == 1:
            #mapper.closeEvent()
            #self.widget.deleteLater()
            #self.widget = QWebEngineView()
            #self.widget.setObjectName("widget")
        #    mapper.setHtml(data.getvalue().decode())
        #    mapper.reload()
            #self.gridLayout_2.addWidget(mapper, 4, 0, 2, 5)
         #   print("\n \n executed map reload \n \n")

        #else:
        #    mapper.setHtml(data.getvalue().decode())
            #self.widget.setHtml(data.getvalue().decode())
        #    self.gridLayout_2.addWidget(mapper, 4, 0, 2, 5)
        #    map_flag = 1
        #    print("\n \n Executed map update \n \n")
        #mapper.deleteLater()

        self.widget.setHtml(data.getvalue().decode())
        # self.widget.setHtml(data.getvalue().decode())

        self.gridLayout_2.addWidget(self.widget, 4, 0, 2, 5)



        #self.gridLayout.addWidget.widget = QWebEngineView()
        #mapper.setHtml(data.getvalue().decode())
        #self.gridLayout_2.addWidget(mapper, 4, 0, 2, 5)



        #print("Mapping completed")
        #self.loadcheckins()
        #QtCore.QTimer.singleShot(30000, self.mapperWidget)
        #QtCore.QTimer.singleShot(30000, self.run_mapper)

    def run_mapper(self):
        global mapper
        global data
        self.mapperWidget()
        print("\n \n Ran Net Manager Map \n \n ")


    def loadcheckins(self):
        global start
        global end

        connection = sqlite3.connect('traffic.db3')
        cur = connection.cursor()
        sql = '''SELECT checkins_Data.NetId, NETS.NETName,NETS.NETSTART, callsign, date, groupname, traffic, ACK
        FROM checkins_Data
        WHERE NETSTART < date '''

        result = cur.execute(sql)


        self.tableWidget.setRowCount(0)
        self.tableWidget.setColumnCount(8)
        for row_number, row_data in enumerate(result):
            self.tableWidget.insertRow(row_number)
            for column_number, data in enumerate(row_data):
                self.tableWidget.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))
        table = self.tableWidget
        table.setHorizontalHeaderLabels(
            str("Net Id; NET Name;NET Start; Callsign Checking in; Date Time of Check in; Group; Traffic; ACK").split(
                ";"))
        header = table.horizontalHeader()
        #header.setSectionResizeMode(QtWidgets.QHeaderView.ResizeToContents)
        header.setStretchLastSection(True)
        table.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        # header.setSectionResizeMode(0, QtWidgets.QHeaderView.Stretch)
        # self.tableWidget = QtWidgets.QTableWidget()
        # self.addWidget(QTableWidget(table),0, 0, 1, 2)
        # self.tableWidget = QtWidgets.QTableWidget()
        #self.tableWidget.resizeColumnsToContents()
        self.tableWidget.verticalHeader().setVisible(False)
        self.tableWidget.sortItems(0, QtCore.Qt.DescendingOrder)
        #self.gridLayout.addWidget(self.tableWidget, 1, 0, 2, 1)
        self.tableWidget.setGeometry(QtCore.QRect(15, 185, 961, 296))

        print("NETMANAGER load check ins complete")

        #print("Load Bulletins & Marquee Completed")
        #QtCore.QTimer.singleShot(30000, self.loadbulletins)



    def loadcheckins_combo(self):
        global start
        global end
        global selectednetid


        selectedNetst = format(self.comboBox_2.currentText())
        #print(selectedNetst)
        arr = selectedNetst.split(' | ')
        #x = txt.split(", ")
        #print(arr[0])
        netid = arr[0]
        netid = int(netid)
        selectednetid = netid
        connection = sqlite3.connect('traffic.db3')
        cur = connection.cursor()
        netstart1 = cur.execute("SELECT NETSTART FROM NETS WHERE NetId = ?",(netid,))
        start1 = netstart1.fetchone()

        netend1 = cur.execute("SELECT NETEND FROM NETS WHERE NetId = ?",(netid,))
        end1 = netend1.fetchone()
        today = QDate.currentDate()
        connection = sqlite3.connect('traffic.db3')
        cur = connection.cursor()
        start = (start1[0])
        #start2 = "2023-02-03 12:19"
        format_data = "%Y-%m-%d %H:%M"
        netstart = datetime.strptime(start, format_data)
        #print(netstart)

        end = (end1[0])
        format_data = "%Y-%m-%d %H:%M"
        netend = datetime.strptime(end, format_data)
        #print(netend)
        query = ("SELECT Id, date, callsign, state, groupname, traffic, ACK FROM checkins_Data WHERE date BETWEEN ? AND ?")
        result = cur.execute(query, (netstart, netend))

        self.tableWidget.setRowCount(0)
        self.tableWidget.setColumnCount(7)
        for row_number, row_data in enumerate(result):
            self.tableWidget.insertRow(row_number)
            for column_number, data in enumerate(row_data):
                self.tableWidget.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))
        table = self.tableWidget
        table.setHorizontalHeaderLabels(
            str("ID; Time Checked In; Callsign Checking In;  State; Group; Traffic; ACK").split(
                ";"))
        header = table.horizontalHeader()
        header.resizeSection(0, 30)
        header.resizeSection(1, 130)
        header.resizeSection(2, 140)
        header.resizeSection(3, 70)
        header.resizeSection(4, 90)
        header.resizeSection(5, 460)
        header.resizeSection(6, 40)

        #header.setSectionResizeMode(QtWidgets.QHeaderView.ResizeToContents)
        header.setStretchLastSection(True)
        table.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        # header.setSectionResizeMode(0, QtWidgets.QHeaderView.Stretch)
        # self.tableWidget = QtWidgets.QTableWidget()
        # self.addWidget(QTableWidget(table),0, 0, 1, 2)
        # self.tableWidget = QtWidgets.QTableWidget()
        #self.tableWidget.resizeColumnsToContents()
        self.tableWidget.verticalHeader().setVisible(False)
        #self.gridLayout.addWidget(self.tableWidget, 1, 0, 2, 1)
        self.tableWidget.sortItems(1, QtCore.Qt.DescendingOrder)
        self.tableWidget.setGeometry(QtCore.QRect(15, 130, 1000, 200))
        self.mapperWidget()
        #self.run_mapper()
        print("NETMANAGER combo load complete")



    def net_add(self):
        global start
        global end
        print("Attempting to add NET")


        NCS = format(self.lineEditNet_NCS.text())
        NCS = NCS.upper()

        NNAME = format(self.lineEditNet_Name.text())
        NNAME = NNAME.upper()

        NDATESTART = (self.dateTimeEdit.dateTime().toString("yyyy-MM-dd HH:mm"))
        NDATEEND = (self.dateTimeEdit_END.dateTime().toString("yyyy-MM-dd HH:mm"))
        start = NDATESTART
        end = NDATEEND
        if start > end:
            msg = QMessageBox()
            msg.setWindowTitle("CommStat error")
            msg.setText("NET Start or End has improper value ")
            msg.setIcon(QMessageBox.Critical)
            msg.setWindowFlag(QtCore.Qt.WindowStaysOnTopHint)
            x = msg.exec_()  # this will show our messagebox
            return


        NBAND = format(self.comboBox.currentText())
        print("NETMANAGER added NEW NET :"+ NNAME,NDATESTART,NDATEEND, NBAND,NCS)

        if len(NNAME) < 3:
            msg = QMessageBox()
            msg.setWindowTitle("CommStat error")
            msg.setText("NET NAME too short")
            msg.setIcon(QMessageBox.Critical)
            msg.setWindowFlag(QtCore.Qt.WindowStaysOnTopHint)
            x = msg.exec_()  # this will show our messagebox
            return




        if len(NCS) < 4:
            msg = QMessageBox()
            msg.setWindowTitle("CommStat error")
            msg.setText("Callsign too short")
            msg.setIcon(QMessageBox.Critical)
            msg.setWindowFlag(QtCore.Qt.WindowStaysOnTopHint)
            x = msg.exec_()  # this will show our messagebox
            return
        if len(NCS) > 8:
            msg = QMessageBox()
            msg.setWindowTitle("CommStat error")
            msg.setText("Callsign too long")
            msg.setIcon(QMessageBox.Critical)
            msg.setWindowFlag(QtCore.Qt.WindowStaysOnTopHint)
            x = msg.exec_()  # this will show our messagebox
            return

        now = QDateTime.currentDateTime()
        date = (now.toUTC().toString("yyyy-MM-dd HH:mm:ss"))
        conn = sqlite3.connect("traffic.db3")
        cur = conn.cursor()
        conn.set_trace_callback(print)
        cur.execute("INSERT INTO NETS(NETName,NETSTART,NETEND,NETBAND, NCS) VALUES(?,?,?,?,?)",(NNAME,NDATESTART,NDATEEND,NBAND,NCS))
        conn.commit()
        print("NETMANAGER completed adding NET to db")
        cur.close()
        self.combo_pop()

    def on_Click(self):
        global index
        global acklist
        try:
            # #selected cell value.
            index = (self.tableWidget.selectionModel().currentIndex())
            # print(index)
            # value=index.sibling(index.row(),index.column()).data()
            value2 = index.sibling(index.row(), 2).data()
            value1 = index.sibling(index.row(), 0).data()
            # value1 = int(value1)
            acklist = acklist + " * " + value2
            conn2 = sqlite3.connect("traffic.db3")
            cur = conn2.cursor()
            # NetId = ?",(netid,))
            name = "YES"
            cur.execute("UPDATE checkins_Data SET ACK=? WHERE ID=?", (name, value1))
            # query3 = "Update checkins_Data set ACK = 'YES' where id = ?",(value1,)
            # cur.execute(query3)
            conn2.commit()
            # print("added " + call + " to NET Check Ins")
            cur.close()
            conn2.close()

            self.lineEdit.setText("Check ins from : " + acklist)
            self.loadcheckins_after()
        except Exception as e:
            print("NETMANAGER Exception from ADD NEW NET : "+e)


    def transmit(self):
        global selectedgroup
        global callsign
        print("transmitting")

        comments1 = "Checked in  "+ acklist
        comments = re.sub("[^A-Za-z0-9*\-\s]+", " ", comments1)

        if len(comments) < 5 :
            msg = QMessageBox()
            msg.setWindowTitle("CommStatX error")
            msg.setText( "Text too short")
            msg.setIcon(QMessageBox.Critical)
            msg.setWindowFlag(QtCore.Qt.WindowStaysOnTopHint)
            x = msg.exec_()  # this will show our messagebox

            return
        group = "@"+selectedgroup
        message = "" + group + " ," + comments + ""
        #message = ""+group + " ," + comments + ""
        messageType = js8callAPIsupport.TYPE_TX_SEND
        messageString = message

        #res = QMessageBox.question(FormCheckin, "Question", "Are you sure?", QMessageBox.Yes | QMessageBox.No)
        msg = QMessageBox()
        msg.setWindowTitle("CommStatX TX")
        msg.setText("CommStatX will transmit : " + message)
        msg.setIcon(QMessageBox.Information)
        msg.setWindowFlag(QtCore.Qt.WindowStaysOnTopHint)
        x = msg.exec_()



        self.sendMessage(messageType, messageString)




    def add_call(self):
        global addcallsign
        global mantestlat
        global mantestlong
        now = QDateTime.currentDateTime()
        utc = (now.toUTC().toString("yyyy-MM-dd HH:mm"))
        state = self.comboBoxState.currentText()
        grid = self.lineEditNet_manual_GRID.text()
        addcallsign = self.lineEditNet_manual.text()
        #print (state)
        #print (addcallsign)
        self.getmember(addcallsign,selectedgroup)
        self.loadcheckins_after()
        if len(grid) == 6:
            coords = mh.to_location(grid)
            print("6 digit")
        else:
            coords = mh.to_location(grid, center=True)
        print(state, grid)
        # coords = mh.to_location(grid, center=True)
        mantestlat = float(coords[0])
        mantestlong = float(coords[1])


        #conn2 = sqlite3.connect("traffic.db3")
        #cur2 = conn2.cursor()
        #cur2.execute(
        #    "INSERT OR REPLACE INTO checkins_Data (date, callsign, groupname, traffic, gridlat, gridlong, state) VALUES(?, ?, ?, ?, ? , ? , ? )",
        #    (utc, addcallcallsign, selectedgroup, traffic, gridLat, gridLong, state))
        #conn2.commit()

        #cur2.close()
        #prGreen(str1.rstrip())
        #prGreen("Added Check in from callsign :" + callsign)
        #prYellow("Attempting to add or update callsign to members list")

    def getmember(self):
        global addcallsign
        global memgroup1
        global memgroup2
        now = QDateTime.currentDateTime()
        utc = (now.toUTC().toString("yyyy-MM-dd HH:mm"))
        state = self.comboBoxState.currentText()
        call = self.lineEditNet_manual.text()
        traffic = self.lineEditNet_manual_TRAF.text()
        grid = self.lineEditNet_manual_GRID.text()


        lastheard = utc
        # gridLat = 0.0;
        # gridLong = 0.0;
        if len(grid) == 6:
            coords = mh.to_location(grid)
            print("6 digit")
            mantestlat = float(coords[0])
            mantestlong = float(coords[1])
        if len(grid) < 4:
            mantestlat = 0.0
            mantestlong = 0.0
        else:
            coords = mh.to_location(grid, center=True)
            mantestlat = float(coords[0])
            mantestlong = float(coords[1])
        print(state, grid)
        # coords = mh.to_location(grid, center=True)



            #print(lastheard, call, memgrp1, memgrp2, gridLat, gridLong)
        conn2 = sqlite3.connect("traffic.db3")
        cur2 = conn2.cursor()
        cur2.execute(
            "INSERT OR REPLACE INTO members_Data (date, callsign, groupname1, groupname2, gridlat, gridlong, state, grid) VALUES(?, ?, ?, ?, ?, ?, ?, ? )",
            (lastheard, call, memgroup1, memgroup2, mantestlat, mantestlong, state, grid))
        conn2.commit()
        cur2.close()
        print ("NETMANAGER Completed add or updated of callsign :" + call + " in members list \n \n")

        #conn2 = sqlite3.connect("traffic.db3")
        cur3 = conn2.cursor()
        cur3.execute(
            "INSERT OR REPLACE INTO checkins_Data (date, callsign, groupname, traffic, gridlat, gridlong, state, grid) VALUES(?, ?, ?, ?, ? , ? , ?, ? )",
             (utc, call, selectedgroup, traffic, mantestlat, mantestlong, state, grid))
        conn2.commit()
        print("NETMANAGER added "+call+" to NET Check Ins")

        cur3.close()
        self.loadcheckins_after()



    def loadcheckins_after(self):
        global start
        global end
        global selectednetid
        if (selectednetid) < 1:
            msg = QMessageBox()
            msg.setWindowTitle("CommStat error")
            msg.setText("No Selected NET to refresh, please select a NET first")
            msg.setIcon(QMessageBox.Critical)
            msg.setWindowFlag(QtCore.Qt.WindowStaysOnTopHint)
            x = msg.exec_()  # this will show our messagebox
            return
        try:
            netid = selectednetid
            connection = sqlite3.connect('traffic.db3')
            cur = connection.cursor()
            netstart1 = cur.execute("SELECT NETSTART FROM NETS WHERE NetId = ?", (netid,))
            start1 = netstart1.fetchone()

            netend1 = cur.execute("SELECT NETEND FROM NETS WHERE NetId = ?", (netid,))
            end1 = netend1.fetchone()
            connection = sqlite3.connect('traffic.db3')
            cur = connection.cursor()
            start = (start1[0])
            format_data = "%Y-%m-%d %H:%M"
            netstart = datetime.strptime(start, format_data)

            end = (end1[0])
            format_data = "%Y-%m-%d %H:%M"
            netend = datetime.strptime(end, format_data)

            query = (
                "SELECT Id, date, callsign, state, groupname, traffic, ACK FROM checkins_Data WHERE date BETWEEN ? AND ?")
            result = cur.execute(query, (netstart, netend))


        except Exception as ex:

            print(ex)
            print("NETMANAGER Failed to refresh, probably due to deleted NET")
            return



        self.tableWidget.setRowCount(0)
        self.tableWidget.setColumnCount(7)
        for row_number, row_data in enumerate(result):
            self.tableWidget.insertRow(row_number)
            for column_number, data in enumerate(row_data):
                self.tableWidget.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))
        table = self.tableWidget
        table.setHorizontalHeaderLabels(
            str("ID; Time Checked in; Callsign Checking in;  State; Group; Traffic; ACK").split(
                ";"))
        header = table.horizontalHeader()
        header.resizeSection(0, 30)
        header.resizeSection(1, 130)
        header.resizeSection(2, 140)
        header.resizeSection(3, 70)
        header.resizeSection(4, 90)
        header.resizeSection(5, 480)
        header.resizeSection(6, 40)
        #header.setSectionResizeMode(QtWidgets.QHeaderView.ResizeToContents)
        header.setStretchLastSection(True)
        table.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        # header.setSectionResizeMode(0, QtWidgets.QHeaderView.Stretch)
        # self.tableWidget = QtWidgets.QTableWidget()
        # self.addWidget(QTableWidget(table),0, 0, 1, 2)
        # self.tableWidget = QtWidgets.QTableWidget()
        #self.tableWidget.resizeColumnsToContents()
        self.tableWidget.verticalHeader().setVisible(False)
        self.tableWidget.sortItems(1, QtCore.Qt.DescendingOrder)
        #self.gridLayout.addWidget(self.tableWidget, 1, 0, 2, 1)
        self.tableWidget.setGeometry(QtCore.QRect(15, 130, 1000, 200))
        #self.mapperWidget()
        self.run_mapper()
        print("Combo load refresh complete")

    def delete_net(self):
        global selectednetid
        if (selectednetid) < 1:
            msg = QMessageBox()
            msg.setWindowTitle("CommStat error")
            msg.setText("No Selected NET to delete, please select a NET first")
            msg.setIcon(QMessageBox.Critical)
            msg.setWindowFlag(QtCore.Qt.WindowStaysOnTopHint)
            x = msg.exec_()  # this will show our messagebox
            return
        else:
            try:
                #sqliteConnection = sqlite3.connect('traffic.db3')
                #cursor = sqliteConnection.cursor()

                netid = selectednetid
                connection = sqlite3.connect('traffic.db3')
                cur = connection.cursor()
                cur.execute("DELETE FROM NETS WHERE NetId = ?", (netid,))
                print("executed the delete for net id "+str(netid))
                connection.commit()

                cur.close()
                self.combo_pop()
            except Exception as ex:
                print(ex)

    def export_csv(self):
        global selectednetid
        global OS_Reports
        if (selectednetid) < 1:
            msg = QMessageBox()
            msg.setWindowTitle("CommStat error")
            msg.setText("No Selected NET to refresh, please select a NET first")
            msg.setIcon(QMessageBox.Critical)
            msg.setWindowFlag(QtCore.Qt.WindowStaysOnTopHint)
            x = msg.exec_()  # this will show our messagebox
            return

        try:
            netid = selectednetid
            connection = sqlite3.connect('traffic.db3')
            cur = connection.cursor()
            netstart1 = cur.execute("SELECT NETSTART FROM NETS WHERE NetId = ?", (netid,))
            start1 = netstart1.fetchone()

            netend1 = cur.execute("SELECT NETEND FROM NETS WHERE NetId = ?", (netid,))
            end1 = netend1.fetchone()
            connection = sqlite3.connect('traffic.db3')
            cur = connection.cursor()
            start = (start1[0])
            format_data = "%Y-%m-%d %H:%M"
            netstart = datetime.strptime(start, format_data)

            end = (end1[0])
            format_data = "%Y-%m-%d %H:%M"
            netend = datetime.strptime(end, format_data)

            netstartB = str(start.replace(" ", "-"))
            netstartB = netstartB.replace(":","-")
            net_data_name = ("NETData_"+(netstartB)+".csv")
            #print("Saved data file : "+OS_Reports+""+net_data_name)


            #query = ("SELECT Id, date, callsign, state, groupname, traffic, ACK FROM checkins_Data WHERE date BETWEEN ? AND ?")
            #result = cur.execute(query, (netstart, netend))
            conn = sqlite3.connect('traffic.db3')
            cursor = conn.cursor()
            clients = pd.read_sql_query('''SELECT Id, date, callsign, state, groupname, traffic, ACK FROM checkins_Data WHERE date BETWEEN ? AND ?''', conn, params=(netstart, netend))
            path = os.path.join('reports', net_data_name)
            clients.to_csv(path, index=False)
            msg = QMessageBox()
            msg.setWindowTitle("CommStat Report Created ")
            msg.setText("CommStat Report : " + net_data_name + "  Created  & placed in reports folder")
            msg.setIcon(QMessageBox.Information)
            msg.setWindowFlag(QtCore.Qt.WindowStaysOnTopHint)
            x = msg.exec_()  # this will show our messagebox
            return






        except Exception as ex:
            print("Failed to write file : "+str(ex))
            return

    def sendMessage(self, messageType, messageText):
        self.api.sendMessage(messageType, messageText)




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form_Net_Manager = QtWidgets.QWidget()
    ui = Ui_Form_Net_Manager()
    ui.setupUi(Form_Net_Manager)
    Form_Net_Manager.show()
    sys.exit(app.exec_())
