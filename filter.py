# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'filter.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
from PyQt5.QtCore import QDateTime, pyqtSignal
from PyQt5.QtGui import QPixmap
from datetime import datetime
import pandas as pd
import io
import re
import maidenhead as mh
from configparser import ConfigParser
import re
from PyQt5.QtWidgets import QMainWindow, QApplication, QLabel, QDateTimeEdit, QLineEdit, QPushButton, QTableWidget, \
    QWidget, QFileDialog, QMessageBox, QGridLayout, QCheckBox, QListView, QListWidget, QListWidgetItem, QVBoxLayout, QDialog
from PyQt5 import uic, QtCore, QtWidgets, QtGui, QtPrintSupport
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QFont
import sys

callsign = ""
callsignSuffix = ""
group1 = ""
group2 = ""
grid = ""
path = ""
selectedgroup = ""
server = ""
port = ""
serverip = ""
serverport = ""

statelist = ['AP', 'AO', 'AO', 'BO', 'CN', 'CM', 'CO', 'DN', 'DM', 'DL', 'DO', 'EN', 'EM','EL','EO','FN','FM','FO']
start = ""
end = ""
green = True
yellow = True
red = True
grids = statelist



class Ui_FilterForm(object):
    closed = pyqtSignal()
    def setupUi(self, FilterForm):
        self.MainWindow = FilterForm
        FilterForm.setObjectName("FormSettings")





        FilterForm.setObjectName("FilterForm")
        FilterForm.setWindowModality(QtCore.Qt.NonModal)
        FilterForm.resize(780, 440)
        FilterForm.setFont(QFont('Arial',9))

        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("USA-32.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        FilterForm.setWindowIcon(icon)

        self.StartDateTimeEdit = QtWidgets.QDateTimeEdit(FilterForm)
        self.StartDateTimeEdit.setGeometry(QtCore.QRect(140, 20, 194, 22))
        self.StartDateTimeEdit.setCalendarPopup(True)
        self.StartDateTimeEdit.setTimeSpec(QtCore.Qt.UTC)
        self.StartDateTimeEdit.setObjectName("StartDateTimeEdit")
        self.StartTimeLabel = QtWidgets.QLabel(FilterForm)
        self.StartTimeLabel.setGeometry(QtCore.QRect(20, 20, 121, 16))
        self.StartTimeLabel.setObjectName("StartTimeLabel")
        self.EndTimeLabel = QtWidgets.QLabel(FilterForm)
        self.EndTimeLabel.setGeometry(QtCore.QRect(370, 20, 111, 21))
        self.EndTimeLabel.setObjectName("EndTimeLabel")
        self.EndDateTimeEdit = QtWidgets.QDateTimeEdit(FilterForm)
        self.EndDateTimeEdit.setGeometry(QtCore.QRect(480, 20, 194, 22))
        self.EndDateTimeEdit.setCalendarPopup(True)
        self.EndDateTimeEdit.setTimeSpec(QtCore.Qt.UTC)
        self.EndDateTimeEdit.setObjectName("EndDateTimeEdit")
        self.greenCheckBox = QtWidgets.QCheckBox(FilterForm)
        self.greenCheckBox.setGeometry(QtCore.QRect(120, 50, 76, 20))
        self.greenCheckBox.setObjectName("greenCheckBox")
        self.YellowCheckBox = QtWidgets.QCheckBox(FilterForm)
        self.YellowCheckBox.setGeometry(QtCore.QRect(250, 50, 76, 20))
        self.YellowCheckBox.setObjectName("YellowCheckBox")
        self.RedCheckBox = QtWidgets.QCheckBox(FilterForm)
        self.RedCheckBox.setGeometry(QtCore.QRect(380, 50, 76, 20))
        self.RedCheckBox.setObjectName("RedCheckBox")
        self.StatusLabel = QtWidgets.QLabel(FilterForm)
        self.StatusLabel.setGeometry(QtCore.QRect(20, 50, 71, 16))
        self.StatusLabel.setObjectName("StatusLabel")
        self.GridSelectpushButton = QtWidgets.QPushButton(FilterForm)
        self.GridSelectpushButton.setGeometry(QtCore.QRect(170, 80, 75, 24))
        self.GridSelectpushButton.setObjectName("GridSelectpushButton")
        self.ClearGridspushButton = QtWidgets.QPushButton(FilterForm)
        self.ClearGridspushButton.setGeometry(QtCore.QRect(90, 80, 75, 24))
        self.ClearGridspushButton.setObjectName("ClearGridspushButton")
        self.GridsLabel = QtWidgets.QLabel(FilterForm)
        self.GridsLabel.setGeometry(QtCore.QRect(10, 110, 111, 20))
        self.GridsLabel.setObjectName("GridsLabel")
        self.gridsSelectedlabel = QtWidgets.QLabel(FilterForm)
        self.gridsSelectedlabel.setGeometry(QtCore.QRect(10, 130, 281, 16))
        self.gridsSelectedlabel.setObjectName("gridsSelectedlabel")
        self.SaveGridspushButton = QtWidgets.QPushButton(FilterForm)
        self.SaveGridspushButton.setGeometry(QtCore.QRect(10, 80, 75, 24))
        self.SaveGridspushButton.setObjectName("SaveGridspushButton")

        self.SavepushButton = QtWidgets.QPushButton(FilterForm)
        self.SavepushButton.setGeometry(QtCore.QRect(660, 400, 75, 24))
        self.SavepushButton.setObjectName("SavepushButton")
        self.CancelpushButton = QtWidgets.QPushButton(FilterForm)
        self.CancelpushButton.setGeometry(QtCore.QRect(550, 400, 75, 24))
        self.CancelpushButton.setObjectName("CancelpushButton")



        self.gridLayoutWidget = QtWidgets.QWidget(FilterForm)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(9, 159, 271, 215))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.listView = QtWidgets.QListView(self.gridLayoutWidget)
        self.listView.setObjectName("listView")
        self.gridLayout.addWidget(self.listView, 0, 0, 1, 1)
        self.label = QtWidgets.QLabel(FilterForm)
        self.label.setGeometry(QtCore.QRect(310, 90, 441, 291))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("grid.png"))
        self.label.setObjectName("label")



        self.greenCheckBox.setChecked(True)
        self.YellowCheckBox.setChecked(True)
        self.RedCheckBox.setChecked(True)



        self.GridSelectpushButton.clicked.connect(self.stateselector)
        self.SaveGridspushButton.clicked.connect(self.stateselected)
        self.ClearGridspushButton.clicked.connect(self.stateclearsel)

        self.CancelpushButton.clicked.connect(self.cancelled)
        self.SavepushButton.clicked.connect(self.save_filter)


        now = QDateTime.currentDateTime()
        now = now.toUTC()


        #self.StartDateTimeEdit.setDateTime(now.addDays(-7))
        #self.EndDateTimeEdit.setDateTime(now)


        self.getConfig()
        self.StartDateTimeEdit.setDateTime(QDateTime.fromString(start, "yyyy-MM-dd HH:mm"))
        self.EndDateTimeEdit.setDateTime(QDateTime.fromString(end, "yyyy-MM-dd HH:mm"))

        self.retranslateUi(FilterForm)
        QtCore.QMetaObject.connectSlotsByName(FilterForm)

    def retranslateUi(self, FilterForm):
        _translate = QtCore.QCoreApplication.translate
        FilterForm.setWindowTitle(_translate("FilterForm", "Commstat Filters"))
        self.StartDateTimeEdit.setDisplayFormat(_translate("FilterForm", "M/d/yyyy h:mm Z"))
        self.StartTimeLabel.setText(_translate("FilterForm", "Starting Date / Time : "))
        self.EndTimeLabel.setText(_translate("FilterForm", "Ending Date / Time : "))
        self.EndDateTimeEdit.setDisplayFormat(_translate("FilterForm", "M/d/yyyy h:mm Z"))
        self.greenCheckBox.setText(_translate("FilterForm", "Green"))
        self.YellowCheckBox.setText(_translate("FilterForm", "Yellow"))
        self.RedCheckBox.setText(_translate("FilterForm", "Red"))
        self.StatusLabel.setText(_translate("FilterForm", "Status Filter : "))
        self.GridSelectpushButton.setText(_translate("FilterForm", "Grid Filter"))
        self.ClearGridspushButton.setText(_translate("FilterForm", "Clear"))
        self.GridsLabel.setText(_translate("FilterForm", "Grids Selected : "))
        self.gridsSelectedlabel.setText(_translate("FilterForm", "All Grids Displayed"))
        self.SaveGridspushButton.setText(_translate("FilterForm", "Select Grids"))
        self.SavepushButton.setText(_translate("FilterForm", "Save Filter"))
        self.CancelpushButton.setText(_translate("FilterForm", "Cancel"))


    def stateselector(self):
        global statelist
        statelist = []
        self.window = QWidget()
        self.listWidget = QListWidget()
        # listWidget.setSelectionMode(2)
        self.listWidget.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
        self.window.setFixedWidth(80)
        self.window.setWindowTitle("Select Grid(s)")

        # QListWidgetItem("Geeks", listWidget)
        # QListWidgetItem("For", listWidget)
        # QListWidgetItem("Geeks", listWidget)
        states = ['AP', 'AO', 'AO', 'BO', 'CN', 'CM', 'CO', 'DN', 'DM', 'DL', 'DO', 'EN', 'EM','EL','EO','FN','FM','FO']
        for state in states:
            QListWidgetItem(state, self.listWidget)

        # listWidget.itemClicked.connect(self.Clicked)

        self.listWidget.itemClicked.connect(self.Clicked)

        self.window_layout = QVBoxLayout(self.window)
        self.window_layout.addWidget(self.listWidget)
        # self.window.setLayout(self.window_layout)
        self.gridLayout.addWidget(self.listWidget, 0, 0, 1, 2)
        self.listWidget.show()


        #self.state.hide()
        #self.stateclose.show()
        #self.stateslabel.hide()

        # self.listView = QtGui.QListView(Dialog)
        # self.listView.setObjectName(_fromUtf8("listView"))

    def closeEvent(self, event):
        print("closed")
        self.closed.emit()


    def stateselected(self):
        global start
        global end
        global green
        global yellow
        global red
        global grids




        self.listWidget.close()
        #self.stateclose.hide()
        #self.state.show()
        self.gridsSelectedlabel.setText(str(statelist))
        #self.stateslabel.show()
        #self.stateclear.show()
        self.setInfo()


    def Clicked(self):
        global statelist

        # QMessageBox.information(self, "ListWidget", "You clicked: " + item.text())
        items = self.listWidget.selectedItems()
        # x = []
        for i in range(len(items)):
            statelist.append(str(self.listWidget.selectedItems()[i].text()))
            print(statelist)
        print(statelist)

    def cancelled(self):
        global start
        global end
        global green
        global yellow
        global red
        global grids
        now = QDateTime.currentDateTime()
        now = now.toUTC()

        #self.StartDateTimeEdit.setDateTime(now)
        #self.StartDateTimeEdit.dateTime(now).addDays(-7)
        start = (QDateTime(now).toString("yyyy-MM-dd HH:mm"))
        end = (self.EndDateTimeEdit.dateTime().toString("yyyy-MM-dd HH:mm"))

        start = QDateTime(now.addDays(-15)).toString("yyyy-MM-dd HH:mm")
        end = QDateTime(now.addDays(7)).toString("yyyy-MM-dd HH:mm")
        green = "1"
        yellow = "2"
        red = "3"
        grids = ['AP', 'AO', 'AO', 'BO', 'CN', 'CM', 'CO', 'DN', 'DM', 'DL', 'DO', 'EN', 'EM','EL','EO','FN','FM','FO']
        self.setInfo()
        self.MainWindow.close()

    def save_filter(self):
        global start
        global end
        global green
        global yellow
        global red
        global grids

        start = (self.StartDateTimeEdit.dateTime().toString("yyyy-MM-dd HH:mm"))
        end = (self.EndDateTimeEdit.dateTime().toString("yyyy-MM-dd HH:mm"))
        if self.greenCheckBox.isChecked() == True:
            green = "1"
        else:
            green = "5"
        if self.YellowCheckBox.isChecked() == True:
            yellow = "2"
        else:
            yellow = "5"

        if self.RedCheckBox.isChecked() == True:
            red = "3"
        else:
            red = "5"


        grids = statelist

        self.setInfo()
        self.MainWindow.close()

    def stateclearsel(self):
        global statelist
        statelist = ['AP', 'AO', 'AO', 'BO', 'CN', 'CM', 'CO', 'DN', 'DM','DL','DO', 'EN', 'EM','EL','EO','FN','FM','FO']
        msg = QMessageBox()
        msg.setWindowTitle("CommStat Report Grid Filter Cleared")
        msg.setText("Grid Filter has been cleared, please reload display")
        msg.setIcon(QMessageBox.Information)
        msg.setWindowFlag(QtCore.Qt.WindowStaysOnTopHint)
        x = msg.exec_()  # this will show our messagebox
        self.gridsSelectedlabel.setText("All Grids Shown")
        #self.stateclear.hide()



    def getConfig(self):
        global serverip
        global serverport
        global grid
        global callsign
        global selectedgroup
        global state
        global callsign
        global callsignSuffix
        global group1
        global group2
        global grid
        global path
        global start
        global end
        global green
        global yellow
        global red
        global grids

        if os.path.exists("config.ini"):
            config_object = ConfigParser()
            config_object.read("config.ini")
            userinfo = config_object["USERINFO"]
            systeminfo = config_object["DIRECTEDCONFIG"]
            filter = config_object["FILTER"]
            callsign = format(userinfo["callsign"])
            callsignSuffix = format(userinfo["callsignsuffix"])
            group1 = format(userinfo["group1"])
            group2 = format(userinfo["group2"])
            grid = format(userinfo["grid"])
            path = format(systeminfo["path"])
            serverip = format(systeminfo["server"])
            serverport = format(systeminfo["port"])
            state = format(systeminfo["state"])
            selectedgroup = format(userinfo["selectedgroup"])
            start = format(filter["start"])
            end = format(filter["end"])
            green = format(filter["green"])
            yellow = format(filter["yellow"])
            red = format(filter["red"])
            grids = format(filter["grids"])





    def setInfo(self):
        global serverip
        global serverport
        global grid
        global callsign
        global selectedgroup
        global state
        global callsign
        global callsignSuffix
        global group1
        global group2
        global grid
        global path
        global start
        global end
        global green
        global yellow
        global red
        global grids

        # Get the configparser object
        config_object = ConfigParser()

        # Assume we need 2 sections in the config file, let's call them USERINFO and SERVERCONFIG
        config_object["USERINFO"] = {
            "callsign": callsign,
            "callsignsuffix": callsignSuffix,
            "group1": group1,
            "group2": group2,
            "grid": grid,
            "selectedgroup": selectedgroup
        }

        config_object["DIRECTEDCONFIG"] = {
            "path": path,
            "server": serverip,
            "port": serverport,
            "state": state

        }

        config_object["FILTER"] = {
            "start": start,
            "end": end,
            "green": green,
            "yellow": yellow,
            "red": red,
            "grids": grids

        }
        print ("here is green"+green)

        # Write the above sections to config.ini file
        with open('config.ini', 'w') as conf:
            config_object.write(conf)
        #self.on_close()



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    FilterForm = QtWidgets.QWidget()
    ui = Ui_FilterForm()
    ui.setupUi(FilterForm)
    FilterForm.show()
    sys.exit(app.exec_())
